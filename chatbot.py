# -*- coding: utf-8 -*-
"""Chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pFaQK5zHu2yeTF7jfrdxI7C1rWvs0kJX
"""

!pip install simpletransformers

train = '[{"context": "Mistborn is a series of epic fantasy novels written by American author Brandon Sanderson.", "qas": [{"id": "00001", "is_impossible": false, "question": "Who is the author of the Mistborn series?", "answers": [{"text": "Brandon Sanderson", "answer_start": 71}]}]}, {"context": "The first series, published between 2006 and 2008, consists of The Final Empire,The Well of Ascension, and The Hero of Ages.", "qas": [{"id": "00002", "is_impossible": false, "question": "When was the series published?", "answers": [{"text": "between 2006 and 2008", "answer_start": 28}]}, {"id": "00003", "is_impossible": false, "question": "What are the three books in the series?", "answers": [{"text": "The Final Empire, The Well of Ascension, and The Hero of Ages", "answer_start": 63}]}, {"id": "00004", "is_impossible": true, "question": "Who is the main character in the series?", "answers": []}]}]'

import json

train = json.loads(train)
train

test = '[{"context": "The series primarily takes place in a region called the Final Empire on a world called Scadrial, where the sun and sky are red, vegetation is brown, and the ground is constantly being covered under black volcanic ashfalls.", "qas": [{"id": "00001", "is_impossible": false, "question": "Where does the series take place?", "answers": [{"text": "region called the Final Empire", "answer_start": 38}, {"text": "world called Scadrial", "answer_start": 74}]}]}, {"context": "Mistings have only one of the many Allomantic powers, while Mistborns have all the powers.", "qas": [{"id": "00002", "is_impossible": false, "question": "How many powers does a Misting possess?", "answers": [{"text": "one", "answer_start": 21}]}, {"id": "00003", "is_impossible": true, "question": "What are Allomantic powers?", "answers": []}]}]'

test = json.loads(test)
test

import json
with open(r"dev-v1.1.json", "r") as read_file:
    data = json.load(read_file)

train_1 = data['data'][0:40]
test_1 = data['data'][40:-1]

train1 = []
for i in train_1:
  train1.append(i['paragraphs'])

test1 = []
for i in test_1:
  test1.append(i['paragraphs'])
test1

train = []
for trains in train1:
  for i in trains:
    train.append(i)

test = []
for tests in test1:
  for i in tests:
    test.append(i)
test

import logging

from simpletransformers.question_answering import QuestionAnsweringModel, QuestionAnsweringArgs

model_type="bert"
model_name= "bert-base-cased"

# Configure the model 
model_args = QuestionAnsweringArgs()
model_args.train_batch_size = 16
model_args.evaluate_during_training = True
model_args.n_best_size=3
model_args.num_train_epochs=20

### Advanced Methodology
train_args = {
    "reprocess_input_data": True,
    "overwrite_output_dir": True,
    "use_cached_eval_features": True,
    "output_dir": f"outputs/{model_type}",
    "best_model_dir": f"outputs/{model_type}/best_model",
    "evaluate_during_training": True,
    "max_seq_length": 128,
    "num_train_epochs": 5,
    "evaluate_during_training_steps": 1000,
    "wandb_project": "Question Answer Application",
    "wandb_kwargs": {"name": model_name},
    "save_model_every_epoch": False,
    "save_eval_checkpoints": False,
    "n_best_size":3,
    # "use_early_stopping": True,
    # "early_stopping_metric": "mcc",
    # "n_gpu": 2,
    # "manual_seed": 4,
    # "use_multiprocessing": False,
    "train_batch_size": 128,
    "eval_batch_size": 64,
    # "config": {
    #     "output_hidden_states": True
    # }
}

model = QuestionAnsweringModel(
    model_type,model_name, args=train_args, use_cuda = False
)

!rm -rf outputs

model.train_model(train, eval_data=test)

result, texts = model.eval_model(test)

to_predict = [
    {
        "context": "Vin is a Mistborn of great power and skill.",
        "qas": [
            {
                "question": "What is Vin's speciality?",
                "id": "0",
            }
        ],
    }
]

answers, probabilities = model.predict(to_predict)

print(answers)